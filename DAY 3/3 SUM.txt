class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         
        Set<List<Integer>> res = new HashSet<>();
        Set<Integer> visited = new HashSet<>();  // this substantially increases the perfomance.
        Arrays.sort(nums);
        
        for(int i = 0; i < nums.length; i++){
           
            int curr = nums[i];
            if(visited.contains(curr)) continue; // if we have already added triplets consisting of a num in array;  we need not process it again. Hence skip the number
                
            int l = i + 1;
            int r = nums.length - 1;
            
            while(l < r){
                int tot = curr + nums[l] + nums[r];
                if(tot == 0){
                    List<Integer> list = Arrays.asList(curr, nums[l] , nums[r]);
                    visited.add(curr);
                    res.add(list);
                    l++;
                    r--;
                }else if(tot > 0){
                    r--;
                }else{
                    l++;
                }
            }
        }
        
        return new ArrayList<>(res);
    }
}