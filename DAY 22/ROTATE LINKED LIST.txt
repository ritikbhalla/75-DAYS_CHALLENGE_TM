class Solution {
    public ListNode rotateRight(ListNode head, int k) {
          if(head == null)
           return head;

        int linkLength = 0;
        ListNode curr = head;
        ListNode lastNode = null;
        
        // cal len of link and find last node 
        while(curr != null) {
            if(curr.next == null)
                lastNode = curr;
            
           curr = curr.next;
            
          linkLength++;
        }
        
        // calculate the rotate node
        //k > length  k/len time link become same link
        int rotateNode = linkLength - (k >linkLength ? k %linkLength : k);
        
        if(rotateNode == 0) {
            return head;
        }
        
     
        curr = head;
        int count = 0;
        
        // find new last node 
        while(count != rotateNode - 1) {
            curr = curr.next;
            count++;
        }
        
        
        // attach old head to last node next
        lastNode.next = head;
       
        //new last node next becomes the head
        head  = curr.next;
        
        //set new last node to null
        curr.next = null;
        
        
        return head;
        
    }
}