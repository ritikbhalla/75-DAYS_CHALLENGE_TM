class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
         if (nums1.length <= nums2.length) {
        return helper(nums1, nums2);
    } else {
        return helper(nums2, nums1);
    }
}

public static double helper(int[] nums1, int[] nums2) {
    if (nums1.length == 0) {
        return nums2.length % 2 == 0 ? (nums2[nums2.length / 2] + nums2[nums2.length / 2 - 1]) / 2.0 : nums2[nums2.length / 2];
    } else if (nums2.length == 0) {
        return nums1.length % 2 == 0 ? (nums1[nums1.length / 2] + nums1[nums1.length / 2 - 1]) / 2.0 : nums1[nums1.length / 2];
    }
    int length = nums1.length + nums2.length;
    int i = 0;
    int j = nums1.length;
    while (i <= j) {
        int mid1 = (i + j) / 2;
        int mid2 = ((length + 1) / 2) - mid1;
        int nums1Max = (mid1 == 0) ? Integer.MIN_VALUE : nums1[mid1 - 1];
        int nums2Max = (mid2 == 0) ? Integer.MIN_VALUE : nums2[mid2 - 1];
        int nums1Min = (mid1 == nums1.length) ? Integer.MAX_VALUE : nums1[mid1];
        int nums2Min = (mid2 == nums2.length) ? Integer.MAX_VALUE : nums2[mid2];
        if (nums1Max > nums2Min) {
            j = mid1 - 1;
        } else if (nums2Max > nums1Min) {
            i = mid1 + 1;
        } else {
            return (length % 2 == 0) ? (Math.max(nums1Max, nums2Max) + Math.min(nums1Min, nums2Min)) / 2.0 : Math.max(nums1Max, nums2Max);
        }
    }
    return 0;
    }
}