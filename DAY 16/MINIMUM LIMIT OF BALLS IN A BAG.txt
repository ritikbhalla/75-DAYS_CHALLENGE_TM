class Solution {
    public int minimumSize(int[] nums, int maxOperations) {
        int maxi = nums[0];
        for(int i=0;i<nums.length;i++){
            maxi = Math.max(maxi,nums[i]); // find out the highest element in the array
        }
        int lo = 1; // At best case, we can have 1 in all bags
        int hi = maxi; // At worst we will have a maximum of [ highest number in array] balls in a bag as any element can break into smaller but cant get increased
        int ans = -1;
        while(lo <= hi){
            int mid = lo + (hi-lo)/2;
            
            // With a given mid, try to find out how many operations will it take if we want to make all array elements less than or equal to mid
            long operations = 0;
            for(int num : nums){
                operations+= num/mid;
                if(num%mid==0)operations--; // if num is a multiple of mid, we just need num/mid -1 operation as last part will itself be equal to others 
            }
            if(operations <= maxOperations){
                // if we can do it in less than or equal to maxOperations, try to lower the answer more
                ans = mid;
                hi = mid - 1;
            }else lo = mid + 1; // we need to try for a higher mid so that operations can be reduced
        }
        return ans;
    }
}