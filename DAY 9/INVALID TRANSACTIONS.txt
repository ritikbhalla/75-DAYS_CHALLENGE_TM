class Solution {
    public List<String> invalidTransactions(String[] transactions) {
          final int len = transactions.length;
        
        final Transaction[] arr = Arrays.stream(transactions)
                .map(d -> new Transaction(d))
                .sorted((a, b) -> a.compareTo(b))
                .collect(Collectors.toList())
                .toArray(new Transaction[len]);
        final boolean[] map = new boolean[len];
        Arrays.fill(map, true);
        
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].amount > 1000) {
                map[i] = false;
            }
            
            for (int j = i + 1; j < arr.length; j++) {
                // already a different user
                if (!arr[j].user.equals(arr[i].user)) {
                    break;
                }
                
                if (arr[j].time - arr[i].time > 60) {
                    break;
                }
                
                if (!arr[j].city.equals(arr[i].city)) {
                    map[i] = false;
                    map[j] = false;
                }
            }
        }
        
        List<String> ret = new ArrayList();

        for (int i = 0; i < map.length; i++) {
            if (map[i] == false)
            ret.add(arr[i].toString());
        }

        return ret;
    }
}

class Transaction implements Comparable<Transaction> {
    String user;
    int time;
    int amount;
    String city;

    public Transaction(final String s) {
        final String[] arr = s.split(",");
        user = arr[0];
        time = Integer.valueOf(arr[1]);
        amount = Integer.valueOf(arr[2]);
        city = arr[3];
    }

    public String toString() {
        return user + "," + time + "," + amount + "," + city;
    }

    public int compareTo(Transaction t) {
        if (!this.user.equals(t.user)) {
            return this.user.compareTo(t.user);
        }

        return this.time - t.time;
    }
}