class Twitter {

    private Map<Integer,Set<Integer>> followersToFolloweeMap;
    private Map<Integer,List<Tweet>> userToPostsMap;
    private final Integer postLimit = 10;
    private int timePool = 0;
    
    private class Tweet {
        int userId;
        int tweetId;
        int time;
        public Tweet(int userId, int tweetId){
            this.userId = userId;
            this.tweetId = tweetId;
            time = timePool++;
        }
    }
    
    public Twitter() {
        followersToFolloweeMap = new  HashMap<Integer,Set<Integer>>();
        userToPostsMap =new HashMap<Integer,List<Tweet>>();
    }
    
    public void postTweet(int userId, int tweetId) {
          Tweet curTweet = new Tweet(userId, tweetId);
          userToPostsMap.putIfAbsent(userId, new ArrayList<Tweet>());
          userToPostsMap.get(userId).add(curTweet);
    }
    
    public List<Integer> getNewsFeed(int userId) {
          PriorityQueue<Tweet> q = new PriorityQueue<>((a,b) -> {return b.time -a.time;});
          List<Integer> recentTweets = new ArrayList<Integer>();
          int idx=0;
          // put my tweets
         if(userToPostsMap.containsKey(userId)){
            for(Tweet post:userToPostsMap.get(userId)) {
                q.offer(post);
            }
         }
        // put my followers tweets.
        if(followersToFolloweeMap.containsKey(userId)) {
            
            for(Integer followers : followersToFolloweeMap.get(userId)) {
                if(userToPostsMap.containsKey(followers)) { // this follower has posts
                    for(Tweet post:userToPostsMap.get(followers)) {
                        q.offer(post);
                    }
                }
            }
        }
    
        while(idx<postLimit && !q.isEmpty()) {
            recentTweets.add(q.poll().tweetId);
            idx++;
        }
        
        return recentTweets;
    }
    
    public void follow(int followerId, int followeeId) {
        followersToFolloweeMap.putIfAbsent(followerId, new LinkedHashSet<>());
        followersToFolloweeMap.get(followerId).add(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        
         if(followersToFolloweeMap.containsKey(followerId)){
            Set<Integer> followList = followersToFolloweeMap.get(followerId);
            followList.remove(followeeId);
         }
    }
}